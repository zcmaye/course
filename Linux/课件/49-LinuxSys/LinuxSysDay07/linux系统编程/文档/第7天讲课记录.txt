1 信号的基本概念
2 信号的特点
3 信号的产生:
  信号的状态:
4 信号的四要素
	信号的编号 
	信号的名字
	信号的默认处理动作
	信号是如何产生的
	
signal函数: 给内核注册信号处理函数
kill: 发送指定信号给指定进程

alarm:
	1 每一个进程都只有一个时钟
	2 alarm函数的返回值: 0 或者是上一个alarm剩余的秒数
	3 alarm(0): 取消定时器
	4 alarm函数发送的是SIGALRM信号
	

闹钟
实际执行时间 = 系统时间 + 用户时间 + 损耗时间
损耗时间= 实际执行时间-(系统时间 + 用户时间 )
每一个数字都直接打印:printf("[%d]\n", i++);
real    0m1.217s
user    0m0.120s
sys     0m0.252s
15734次
损耗时间= 1.217-(0.120+0.252)=0.845
文件重定向之后:
time ./alarm_uncle  > test.log
real    0m1.003s
user    0m0.520s
sys     0m0.428s
2191879次
损耗时间=1.003-(0.520+0.428)=0.055
	原因是: 调用printf函数打印数字遇到\n才会打印, 打印过程涉及到从
	用户区到内核区的切换, 切换次数越多消耗的时间越长, 效率越低;
	而使用文件重定向, 由于文件操作是带缓冲的, 所以涉及到用户区到内核区的
	切换次数大大减少,从而使损耗降低.

int setitimer(int which, const struct itimerval *new_value,
                     struct itimerval *old_value);

功能: 设置时钟, 能够周期性的触发时钟                    